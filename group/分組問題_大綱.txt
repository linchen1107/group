題目: 分組問題
		舉例: 10人的班級，對其他九個人依照喜好程度進行評分 ( 1~5 分) 並分組，若沒評分則預設為三分。
		
程式碼簡介:
		打開app.py，此時 Flask 會啟動一個開發伺服器，預設監聽在 http://localhost:5000。

		2. 使用前端介面提交評分
		打開瀏覽器：在瀏覽器中輸入 http://localhost:5000/ 進入前端介面。
		登入：在登入頁面輸入你的姓名與學號（必須和 students.csv 中的資料一致）。
		填寫評分：登入後，你會看到所有其他同學的卡片。
		如果不勾選「啟用評分」，系統會自動以預設的 3 分來計算；
		如果你勾選並選擇其他評分，則以你選的分數為準。
		確認評分：填寫完畢後點選「確認評分」按鈕。
		此時評分資料會送到後端，並存入資料庫。
		若表單尚未關閉（預設為開啟狀態），評分提交成功。
		
		3. 表單管理（老師操作）
		關閉表單：當所有學生都完成評分後，老師可以透過 API 或管理工具呼叫 /close_form（POST 請求）來關閉表單。
		當表單關閉後，學生將無法再提交或修改評分，這確保評分資料固定下來供後續分組計算。
		重新開放表單：若需要再次接受評分，可呼叫 /open_form（POST 請求）。
		你也可以在前端加入一個檢查表單狀態的功能，讓使用者得知當前表單是否已關閉。

		4. 查看與匯出結果
		關係矩陣：

		呼叫 /export_relationship_matrix 路由（例如在瀏覽器輸入 http://localhost:5000/export_relationship_matrix），將匯出整個班的互評矩陣到 Excel。
		Excel 檔案中第一列與第一欄會顯示學生姓名，對角線為 0，其他欄位為雙方評分總和（若無評分紀錄則預設 6 分）。
		自動分組結果：

		呼叫 /auto_grouping 路由（例如 http://localhost:5000/auto_grouping?anchor_id=你的學號），系統將根據互評矩陣與貪婪演算法計算分組結果，回傳 JSON 格式的分組資料。
		此分組演算法會以每組理想 4 人為主（最多 5 人），並根據各組成員之間的互評總和（synergy）進行調整，避免出現單獨一組的情形。
		匯出分組結果：

		呼叫 /export_grouping 路由（例如 http://localhost:5000/export_grouping?anchor_id=你的學號），將分組結果匯出成 Excel 表格。
		Excel 檔案中第一欄為組別編號，第二欄以逗號分隔顯示各組成員姓名。
		
		5. 總結
		啟動應用程式：使用 python app.py 啟動 Flask 伺服器。
		學生端操作：透過瀏覽器進入首頁 http://localhost:5000/，登入並提交評分。
		表單控制：老師透過 /close_form 關閉評分表單，防止修改。
		結果匯出：利用 /export_relationship_matrix、/auto_grouping 和 /export_grouping 路由來查看互評矩陣及分組結果。

第一部分
1.製作表單
		我想要讓表單設計者能夠在後端更簡單更改學生學生的姓名以及學號，該怎麼做到呢?
		例如將同學1~50，每人的姓名學號更改為學號	姓名
		
		我想要照以下格式複製貼上就好，中間不打逗號，不然好麻煩，你有甚麼好的建議嗎?我是從EXCEL上複製下來的
		
		我現在所有的檔案目錄會長怎樣?使用 Python 的 csv 模組讀取一個純文字檔案（例如 students.txt），該檔案內容直接從 Excel 複製貼上，且以 Tab 為分隔符。你只需要將以下程式碼存成一個 Python 檔案，並確保同一目錄下有一個名稱為 students.txt 的檔案上面這部分我不太懂。
		
		讀取students.csv的過程應該有些問題，我輸入相同的學號姓名卻無法登入。
		----這個問題通常發生在讀取 `students.csv` 檔時，可能是因為資料中的空格、編碼問題或其他格式問題導致資料無法正確匹配。
		
		若學號以及姓名皆輸入正確，則不要讓該同學評分自己。
		
		現在我要讓表單在成功登入後，可以
			1.按下重新整理不會回到登入葉面較使用者在登入一次
			2.有一個重新登入的按鈕，在頁面的左上角
			
			
2.將表單的結果與py做結合(excel): 一開始確定評分的按鈕在正中間，按下確定評分後再跑出匯出excel按鈕，讓使用者可以更直觀也避免誤觸

在index.html的網頁前新增一個首頁，讓填答者可以輸入自己的姓名、學號，輸入完成後與表單的內容作匹配，如果
匹配不到學號但匹配的到姓名則顯示【學號有誤】
匹配的道學號但匹配不到姓名則顯示【姓名有誤】
兩個都匹配不到則顯示【輸入錯誤，請重新輸入】

第二部分
3.將抓取到的資料建立成關係矩陣

4.演算法
現在我們改用貪婪演算法解決這個問題，而不要用暴力解法，這太複雜了

「先依分數由大到小排序，依序選用最高分配對」
不以任何人作為首位 Anchor，而是先從「分數最高的 (i,j)」開始，
若該兩人都尚未分組，則將他們配為一組；依序往下直到所有人皆分組或只剩下單數一人。
這種方法通常被稱為「最大配對的貪婪近似」，不一定保證全域最佳，但能快速分出相對合理的組別。


所以我要新建一個html檔嗎?不能在原本的網站運行?
例如說我點擊確認評分後，切換頁面到分組結果
-----------------------------------------------------------------------





5.建立資料庫
資料回傳給資料庫，必須包含學號、姓名以及評分分數
在回傳最新的評分結果時同時摻除這個評分者之前的所有結果



第三部分
1.前端優化
監聽搜尋框的輸入事件
若姓名或學號包含關鍵字，就顯示卡片；否則隱藏

2.後端分組
分組結果不夠直觀，我要在匯出excel表中看到它
但我居然沒有和沈育朋：評分 5 分
許力勻：評分 5 分
羅義康：評分 5 分
莊乙庭：評分 5 分的其中三人一組，這就很奇怪，而且是以【四人一組為主】，萬不得已才會到五人一組，怎麼會一開始就是一堆五人一組呢?
這樣是不對的，其實只要所有人填答完後，因為我已經建立了關係矩陣(在excel中)，讓得分最高的一句貪婪演算法分到一組即可，然後一組以四人為優先，直到最後若有組別不滿四人則以該同學為出發點，分到其他得分相對高的組別。
結果正確，但group組別號碼錯誤













這個系統將具備以下特點：

學生可對其他 49 位同學評分 (1-5 分)，未評分者預設為 3 分。
依據「互相給分高的同學優先分為一組」的邏輯，自動產生 4-5 人一組的分組結果。
支援自動產生 PDF 或 Excel 格式的報表。
連接後端資料庫，讓老師上傳名單後，網頁自動更新班級資訊。

不能有人落單。基礎為五人一組，不得已或是有多出來不滿三人則依照評分結果分配到最適合他們的組別，滿四人一組則他們四個一組
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------


Research completed in 8m·3 個資料來源

技術方案
前端框架與設計

框架選擇：採用現代化的前端框架如 React 或 Vue.js 來構建單頁應用（SPA）。例如可以使用 React 並結合 Material-UI (MUI) 或 Ant Design 元件庫，快速打造簡潔美觀的介面。這些框架提供良好的響應式設計和可重用元件，有助於實現現代風格的UI。
評分表單介面：提供學生給同儕評分的網頁表單。介面上列出班上除自己外的其他 49 位同學名單，每位同學旁有一個評分控件（可用下拉選單1-5分或星級評分元件）。初始載入時，評分欄位預設值為 3 分（表示中立分數），學生可調整為1～5分。表單採用簡潔的表格或清單布局，避免視覺雜亂，並在提交前提供確認或提示未評分者將預設為3分。

使用者體驗：前端透過AJAX/Fetch調用後端API提交評分，無須整頁重新載入，提升體驗。可在學生提交後即時給予成功提示。界面設計遵循現代UI/UX規範（如Material Design），使用清晰的按鈕和適當的留白，使操作簡單直觀且美觀。

分組結果顯示：在老師查看分組結果的頁面，將自動分組的結果以視覺化方式呈現。例如將每個小組顯示為一個卡片或面板，內含組別名稱（或編號）及組員名單。版面設計力求清晰，一目了然每組4-5人。對於互相給高分而被分在一起的同學，可用高亮或圖示提示他們是高互評匹配。

介面互動：提供老師手動調整分組的介面。可使用拖放（Drag-and-Drop）功能讓老師將學生從一組拖移到另一組，或透過下拉選單更改學生所屬組別。前端可利用現成的拖放套件（例如 react-beautiful-dnd 在React中）實現直觀的拖曳調整。每當老師調整後，前端即時更新畫面並調用後端API保存修改的分組結果。

班級名單管理：提供老師維護班級學生名單的前端介面。例如一個簡單的文字區域或匯入按鈕，允許老師貼上學生姓名清單（用換行或逗號分隔），或上傳包含學生名單的檔案（如CSV）。提交後前端呼叫後端API更新資料庫中的學生名單，並自動刷新前端列表以顯示最新的學生名單。這樣可方便地在學期更換學生或新班級時快速更新系統。

響應式與美觀：整體前端風格強調現代化與簡潔美觀。使用一致的色彩和字體，搭配圖示和適當的動畫增強體驗（例如拖放過程中的視覺反饋）。介面對不同裝置友好（桌機、大螢幕查看分組方便，同時表單元件也可適應平板等）。透過CSS預處理器或現代CSS（如Flexbox/Grid）實現彈性布局，使表單和分組結果區域清晰分區，讓使用者能夠快速掃描重點資訊。


後端架構


技術棧選擇：後端可使用 Node.js 搭配 Express 框架構建RESTful API，或使用 Python Django/Flask 等框架實現類似功能。以 Node.js + Express 為例，它能輕鬆與前端的React生態對接，並具備處理並發請求的能力。

架構設計：遵循MVC或分層架構將不同職責劃分清楚。例如建立控制器/路由來處理不同功能：學生評分、自動分組、調整分組、匯出報表、班級名單管理等。使用中介軟體 (middleware) 處理身份驗證和錯誤處理。
API 接口：設計清晰的REST API供前端調用：
GET /api/students：取得班級學生名單（供評分表單和分組結果頁使用）。
POST /api/ratings：提交學生對同儕的評分表（前端在學生完成評分後呼叫，將一名學生對其他所有人的評分提交）。後端接收後寫入資料庫。
POST /api/groups/auto-generate：讓老師觸發自動分組。後端執行分組演算法，將生成的分組結果保存並返回給前端顯示。
GET /api/groups：取得當前的分組結果（老師打開分組結果頁面時調用，返回每個組的成員名單）。
PUT /api/groups：提交老師手動調整後的分組結果（前端將修改後的組別成員資料傳給後端更新資料庫）。
POST /api/report：生成報表的請求，後端根據目前分組結果生成PDF或Excel文件，返回下載連結或文件流。
POST /api/class/update：更新班級名單，接受老師上傳的學生清單資料，更新資料庫並返回成功狀態。

身份權限：後端可以實作基本的身份驗證與權限控管。例如老師登入後才能訪問分組結果調整和報表下載接口；學生只能提交自己的評分表單。這可透過JWT等方式實現API保護。

效能與異步：評分提交和分組計算等操作採用異步處理，確保後端在運算分組演算法時不阻塞其他請求。必要時可使用任務隊列或後台工作線程來執行較重的分組計算，再將結果存儲供前端查詢。由於班級規模（50人左右）不算大，一般伺服器在幾秒內即可完成演算法計算，直接同步返回問題不大。

現代後端實踐：使用JSON作為API傳輸格式方便前後端溝通。對於複雜查詢（如統計高互評關係）可使用資料庫查詢或在後端邏輯處理。程式碼上注重可讀性和模組化，以利日後維護和功能擴充（例如因應不同班級規模或不同評分標準的擴充）。


資料庫設計

資料庫類型：採用關聯式資料庫（如 MySQL 或 PostgreSQL）以保存結構化資料。這類資料庫方便我們使用SQL進行查詢和維護資料完整性。若偏好NoSQL，也可以使用 MongoDB 等文件型資料庫，不過在關聯查詢（如跨表檢索評分和學生）時會稍嫌不便。以下以關聯式資料庫設計資料表：

學生表 (Students)：紀錄學生基本資訊。欄位包括：student_id (主鍵)、name、class_id（所屬班級，用於支援多班級或未來擴充）、其他如email或帳號資訊（若需要登入）。
評分表 (Ratings)：紀錄學生之間的評分。欄位：rater_id、target_id、score，以及class_id（確保評分關聯到正確班級）。每對學生關係最多會有一筆評分記錄（例如學生A對學生B的評分一筆，B對A另有一筆）。未評分者我們可不在表中建立記錄，視為預設3分；或者在學生名單建立時預先為每對關係填入3分，學生更新評分時修改該記錄。預先填入方便查詢但資料量較大（50人互評大約50*49條記錄），也可以選擇僅存儲非3分評分，在計算時將缺失值視作3分處理。

分組結果表 
(Groups)：記錄每次自動分組的結果。欄位：group_id、class_id、group_name/number（組別名稱或編號）。每次重新分組可以重建此表內容。如果需要保留歷史分組結果，可增加時間戳或批次號。
組員關聯表 (GroupMembers)：連結學生與分組。欄位：group_id、student_id。當產生新的分組結果時，先刪除舊的GroupMembers再插入新的，或採用批次號區分。老師手動微調分組後，也更新此表以保存最新結果。

班級表 (Classes)：（可選）紀錄班級資訊：class_id、class_name、teacher_id等。如果系統需支援多班級或老師管理多個班級，這是必要的。單一班級的情況下亦可省略此表，直接在Students中管理名單。

其他：若需用戶登入，還會有Teachers和StudentsUsers帳號表，用於驗證身份。上述設計重點在評分和分組相關的表，確保數據表關聯清晰：Students和Ratings透過student_id相關聯，Groups與Students透過GroupMembers相關聯。透過這些表可以方便地查詢出某組的全部學生，以及計算任意兩人之間的互相評分。


分組邏輯實現

目標：根據「互相給分高的同學優先分為一組」的原則，自動將全班同學分成若干小組（每組4-5人）。本質上是要最大化組內成員兩兩之間的互惠評分總和，使得彼此欣賞的學生盡可能被分配在一起。

資料準備：後端在計算分組前，先從資料庫讀取所有評分資料，構建同學之間的互評矩陣或圖模型。例如建一個50x50矩陣 M，其中 M[A][B] 表示學生A給學生B的評分（1-5，缺失則按3算）。為了衡量兩人互相喜歡程度，可定義互惠分數：例如 W(A,B) = M[A][B] + M[B][A]，這代表A和B彼此給分的總和。互惠分數越高，表示兩人互相評價越好。

演算法選擇：將問題建模為帶權重的圖分割：學生為節點，節點間邊的權重可用互惠分數表示。我們希望將圖分割成若干子集（每子集4-5個節點），使子集內的總權重最大。這是一個組合最佳化問題。精確求解可能需要遍歷大量可能分組（屬於NP困難問題），但班級人數適中，可以透過啟發式演算法得到近似最優解：

貪心演算法：一種簡單可行的方法是貪婪聚合法：
找出互惠分數最高的一對學生，將他們作為一組的起始成員。
對已有的小組，找出與該組現有成員平均互評分數最高的未分組學生，將其加入該組。重複此步，直到該組人數達到上限5人。若組內已有4人且剩餘學生數不足以都組成5人組，可提前停止在4人。
重複以上步驟，形成後續的小組。每次都從剩餘未分組學生中選擇互評關係緊密的一對開始組建新組。
如果最後剩餘的學生人數不足組成滿編組，可能會出現一組只有2-3人的情況，這時可以將他們併入已有組（根據互評分數相對高的組別加入），或調整某些組從5人減為4人以平衡分組人數。
該貪心策略能確保大多數高互評的同學被聚在一起，但由於先後順序影響，有可能產生次優情況，可透過隨機打亂初始順序多次、或最後進行少許組間調換來改進結果。

其他方法：可以將此問題轉化為聚類問題或圖算法：例如以互惠分數作為相似度，對學生進行分層式聚類，最後按照需要的組數將樹狀圖截斷形成各組。然而一般的聚類演算法未必能嚴格滿足每組4-5人的約束，因此需要在聚類結果上再調整人數。另一種途徑是使用遺傳演算法或模擬退火這類隨機最佳化方法：將一個分組方案編碼為解，通過隨機交換學生等操作反覆優化總互惠分數​
REDDIT.COM
。這些方法在理論上可更接近全域最優，但實作較複雜且計算時間可能較長。在50人規模下，經過優化的貪心法已能給出令人滿意的結果。


實作細節：演算法邏輯可寫在後端（例如Node.js的服務端JavaScript或Python）中。讀取評分資料後，用上述策略計算分組，把結果寫入資料庫的Groups和GroupMembers表。同時返回結果給前端顯示。由於預設未評分為3分，許多同學互評分可能都在中間值，使得演算法需要關注高於3分的互評關係（比如雙方都給4或5分）來決定組隊。如果發現某些學生互評分普遍偏低，演算法會將他們放入同組的優先級降低，除非別無選擇才同組。

校正與例外：若演算法產生的結果有不理想之處（例如某對學生其實不適合一組但被強制放一起），老師可利用介面手動調整。演算法也會避免明顯衝突的分組。如果需要，可以在演算法中加入業務規則，如避免某些組合（黑名單）或強制某些學生同組（白名單），滿足老師特定要求。


手動調整組別介面
介面功能：老師查看自動分組結果後，可以通過前端提供的介面進行手動調整。每個小組會以區塊形式呈現，區塊內列出該組學生。老師可以將學生名稱拖拽到另一組的區塊中，或在學生條目上提供一個下拉選單讓老師選擇將該學生移動到其他組別。介面會即時更新組內人數並標示超出限制的情況（如某組因手動加入人數變為6人時，給予提示）。

即時驗證：當老師調整時，前端可以檢查新的組別大小是否在4-5人範圍內，超出則提醒老師進行進一步調整。也可以提示如果某些高互評關係被拆開（例如原本互評高的兩人被分到不同組），以便老師知悉。這些提示可以以視覺效果（不同顏色或圖示）呈現，但不強制，讓老師自主決定。


資料更新：老師完成調整後，點擊「保存/確認分組」按鈕，前端會整理當前分組結果，透過PUT /api/groups（或PATCH）請求將新的分組安排發送給後端。後端接收後，更新資料庫中的Groups/GroupMembers表，使最終結果持久化。隨後可以重新向前端回傳最新的分組資料，或前端本身已經有最新狀態無需再取。

使用體驗：此手動調整功能確保即使演算法分組未盡完善，老師也有 100% 控制權 最終確定組別。透過直觀的拖放和即時反饋，大幅降低人工重新分組的繁瑣度。介面風格與前端其他部分保持一致，強調易用性，例如拖放操作提供明顯的拖影和目標高亮，讓老師清楚看到將學生移到哪一組。


報表輸出功能

格式選擇：系統提供PDF 和 Excel 兩種格式的分組報表輸出，滿足老師不同需求（PDF方便列印，Excel方便後續編輯或成績計算）。老師在前端點擊「匯出 PDF」或「匯出 Excel」按鈕即可獲取。

PDF生成：後端收到PDF匯出請求後，會將當前的分組結果以美觀的版面產生PDF文件。例如使用 PDFKit（Node.js環境）程式化地繪製PDF內容，列出各組名稱和成員清單；或利用後端模板引擎生成HTML報表，再透過 Puppeteer 等無頭瀏覽器將該HTML轉換為PDF。【在Python後端也可選擇像 ReportLab 或 WeasyPrint 這樣的庫實現PDF匯出】。版面上會按照小組逐行列出，並配上日期、班級名稱等抬頭資訊，確保輸出報表正式且易讀。

Excel生成：對於Excel匯出，後端可使用 SheetJS (xlsx) 這類庫（如果用Node.js）將分組資料寫入Excel檔案。每個組可在Excel的同一工作表中依序列出，或每組一個工作表。如果需要更簡單的實作，也可匯出 CSV 純文字，讓Excel打開解析。不過直接生成.xlsx文件可以包含多工作表和格式，使用體驗更佳。

匯出流程：後端生成文件後，將文件保存至臨時目錄並返回一個下載連結給前端，或直接以二進制流的方式讓前端觸發下載。前端接到回應後，自動下載該文件到老師電腦。為便利用戶，文件命名會包含班級和日期等資訊。匯出過程中，如遇生成時間稍長（尤其PDF生成帶樣式時），前端可提示“正在生成報表…”並在完成後提供下載。

報表內容：報表中主要包含最終的分組結果。每組下列出學生姓名（可加學號以資識別）。如果需要，還可以在報表中附加每組的簡單統計，如該組內平均互評分數（表示該組匹配度），但這非必要需求。重點是格式整潔、欄位對齊，使老師方便打印或發送給他人查看。


班級名單更新與資料同步

名單匯入：為了讓班級名單的管理方便，老師可以將學生名單直接複製到系統中。前端提供簡單易用的匯入介面（例如文本框可貼上整批姓名或學號清單，或上傳Excel/CSV檔案）。老師提供名單後，前端將資料送到後端進行處理。

後端處理：後端在接收到新的班級名單後，會執行以下操作：

解析名單：如果是純文字名單，按行拆分出學生姓名列表；如是文件則進行解析。

更新資料庫：將該班級現有的Students表資料清除或標記刪除，然後插入新的學生資料。每個學生會獲得新的student_id（或沿用學號作為ID）。同時也可以批量初始化評分表Ratings：對於新名單中的每對學生，預先插入score=3的紀錄，作為默認評分。或者選擇在學生評分時再逐筆新增。

重置分組：更新名單後，以前的分組結果和評分已無效，後端可以清空舊的Groups/GroupMembers記錄，準備迎接新一輪評分與分組。

前端更新：後端成功更新名單後，API回傳成功訊息給前端。前端隨即重新請求學生名單接口，獲取新的學生列表。介面上的評分表單將自動生成對應數量的評分項目（例如新的班級有N人則出現N-1個評分欄位)。這種自動同步機制確保資料的一致性：老師一旦更改了班級成員，學生端看到的評分對象、老師看到的分組對象都會更新，避免使用過時名單進行操作。

錯誤處理：如果老師誤操作導致名單格式錯誤（例如缺少必要欄位），後端會返回錯誤訊息，前端提示老師修正。更新過程中可能涉及刪除大量記錄，為安全可在資料庫層面使用交易 (transaction)，確保名單和相關評分資料的一致更新，不會出現部分更新的異常狀況。


現代化風格考量

整體UI風格：採用現代化的設計風格，強調簡潔清爽的介面。同時運用一致的色彩主題和字體，使應用看起來專業且易於使用。比如選擇淺色系背景搭配學校主題色作為點綴，高對比度的文字以確保可讀性。

元件與排版：大量使用現代UI元件庫提供的組件，如響應式的格線系統、卡片式版面、下拉選單、按鈕組等，讓介面元素對齊整齊、大小適中。透過適當的留白和分隔線區分不同功能區（評分表單區、分組結果區等），避免資訊過度密集。

圖示和提示：使用直觀的圖示（如星星表示評分等）輔助文字說明，加強可理解性。對於互評高的成員或拖放操作等關鍵交互，提供微動畫和狀態改變提示，增加介面活力同時讓用戶清楚系統反應。這些細節符合現代網頁設計趨勢，也提升使用者滿意度。

響應式設計：確保系統在各種裝置上都能良好顯示。評分表單和分組結果主要針對桌機瀏覽，但也需適配平板甚至手機瀏覽（老師可能用平板調整分組或查看結果）。透過CSS Media Queries或前端框架的響應式特性，自適應不同螢幕尺寸。

一致性與美觀：無論是學生填寫評分的介面還是老師檢視結果的介面，都保持一致的設計語言。例如使用同一套色彩/字型方案、按鈕風格一致，讓整個系統有統一的品牌感。介面簡潔不意味單調，可透過適當的色彩強調（如重要按鈕使用鮮明色）和排版層次，達到美觀且不繁雜的效果。